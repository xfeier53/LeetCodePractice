//We have two special characters. The first character can be represented by one bit 0. The second character can be represented by two bits (10 or 11).
//
// Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.
//
// Example 1:
//
//Input:
//bits = [1, 0, 0]
//Output: True
//Explanation:
//The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.
//
//
//
// Example 2:
//
//Input:
//bits = [1, 1, 1, 0]
//Output: False
//Explanation:
//The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.
//
//
//
// Note:
// 1 <= len(bits) <= 1000.
// bits[i] is always 0 or 1.
//

First solution:
Traverse the array from start to end, meet "1" skip two index, meet "0" skip one index
Check whether the i can reach the length, which means the last "0" is used to form a 2-bit, then it is false

Second solution:
If there is only one digit, it is "0", true
If there is more than one digit:
    End with "00", ture
    End with "10":
        Odd number of consecutive "1": false, the last "0" is used to form a 2-bit with the alone "1"
        Even: true