//Say you have an array for which the ith element is the price of a given stock on day i.
//
// If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.
//
// Note that you cannot sell a stock before you buy one.
//
// Example 1:
//
//
//Input: [7,1,5,3,6,4]
//Output: 5
//Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
//Â             Not 7-1 = 6, as selling price needs to be larger than buying price.
//
//
// Example 2:
//
//
//Input: [7,6,4,3,1]
//Output: 0
//Explanation: In this case, no transaction is done, i.e. max profit = 0.
//
//

Dynamic algorithm:
If the current element is less than the previous one
It is not going to make better profit
During the traversal, keep record of the minimum as buying price
If the current price is higher than max, sell at this price make better profit
If the profit is better than (max - min), then update
In this case, we have to use two parameter to store minimum and currentMin
As the currentMin can come later than max, then it won't be helpful