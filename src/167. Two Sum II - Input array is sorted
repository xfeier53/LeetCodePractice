//Given an array of integers that is already sorted in ascending order, find two numbers such that they add up to a specific target number.
//
// The function twoSum should return indices of the two numbers such that they add up to the target, where index1 must be less than index2.
//
// Note:
//
//
// Your returned answers (both index1 and index2) are not zero-based.
// You may assume that each input would have exactly one solution and you may not use the same element twice.
//
//
// Example:
//
//
//Input: numbers = [2,7,11,15], target = 9
//Output: [1,2]
//Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.
//

Solution:
Two for loop, 46ms, too slow
Use TreeSet to store and search the complement (target - numbers[i]), 3ms, better
Use HashSet, 2ms, better
1ms solution:
Find the index of the largest number, which is below target
Find the complement by reduce from the largest number, which narrow the range a lot

Best Solution:
Shrink the range from 0 to numbers.length to find the pair
It is sorted and it guarantee a answer without using one element twice


