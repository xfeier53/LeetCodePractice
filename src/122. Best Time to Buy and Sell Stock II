//Say you have an array for which the ith element is the price of a given stock on day i.
//
// Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).
//
// Note: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).
//
// Example 1:
//
//
//Input: [7,1,5,3,6,4]
//Output: 7
//Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.
//             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.
//
//
// Example 2:
//
//
//Input: [1,2,3,4,5]
//Output: 4
//Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.
//             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are
//             engaging multiple transactions at the same time. You must sell before buying again.
//
//
// Example 3:
//
//
//Input: [7,6,4,3,1]
//Output: 0
//Explanation: In this case, no transaction is done, i.e. max profit = 0.
//

Greedy algorithm
The difference between pair of price will be accumulated
1 2 8 9 = (2 - 1) + (8 - 2) + (9 - 8) = (9 - 1)
It actually automatically find the biggest profit until it find a smaller number
Two situation:
9 is the biggest price
It will be the sub problem for the number after 9
It is not possible to create better profit than choosing 9 as selling price
9 is not the biggest price
1 2 8 9 7 12 = (9 - 1) + (12 - 7)
The profit between 9 and the next bigger number will be less than
the profit between any number and the next bigger number
It is equal if it is another 9
1 2 8 9 9 12 = (12 - 1)
If it is decreasing, no profit

Another explanation:
Hold the stock if next price is higher
Sell the stock if next price is lower
Buy the stock if next price is higher
Don't buy anything if the next price is lower


